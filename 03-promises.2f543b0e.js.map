{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAASC,SAASC,cAAc,SAChCC,EAAWF,SAASC,cAAc,UAClCE,EAAW,CACfC,WAAY,GACZC,UAAW,GACXC,OAAQ,IAsCV,SAASC,EAAcC,EAAUC,GAC/B,IAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,SAACC,EAAKC,GACvBC,YAAW,WACLN,EACFO,EAAApB,GAASqB,OAAOC,QACd,uBAAwCC,OAAfZ,EAAS,QAAYY,OAANX,EAAM,OAGhDQ,EAAApB,GAASqB,OAAOG,QACd,sBAAqCD,OAAfZ,EAAS,QAAYY,OAANX,EAAM,M,GAG9CA,E,IAhDPV,EAAOuB,iBAAiB,SAExB,WAIE,OAHAnB,EAASC,WAAaL,EAAOwB,SAASd,MAAMe,MAC5CrB,EAASE,UAAYN,EAAOwB,SAASE,KAAKD,MAC1CrB,EAASG,OAASP,EAAOwB,SAASjB,OAAOkB,MAClCrB,C,IAGTD,EAASoB,iBAAiB,SAE1B,SAAuBI,GAErB,GADAA,EAAIC,iBAE8B,KAAhC5B,EAAOwB,SAASd,MAAMe,OACS,KAA/BzB,EAAOwB,SAASE,KAAKD,OACY,KAAjCzB,EAAOwB,SAASjB,OAAOkB,MAEvBP,EAAApB,GAASqB,OAAOU,KAAK,2BAIrB,IAFA,IAAIpB,EAAW,EACXC,EAAQoB,OAAO1B,EAASC,YACrBD,EAASG,OAAS,GACvBC,EAAcC,EAAUC,GACxBD,GAAY,EACZsB,QAAQC,IAAIvB,GACZC,GAASoB,OAAO1B,EAASE,WACzByB,QAAQC,IAAItB,GACZN,EAASG,QAAU,EAIvBP,EAAOiC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector('.form');\nconst buttonEl = document.querySelector('button');\nconst localObj = {\n  firstDelay: '',\n  delayStep: '',\n  amount: '',\n};\n\nformEl.addEventListener('input', textInput);\n\nfunction textInput() {\n  localObj.firstDelay = formEl.elements.delay.value;\n  localObj.delayStep = formEl.elements.step.value;\n  localObj.amount = formEl.elements.amount.value;\n  return localObj;\n}\n\nbuttonEl.addEventListener('click', onclickSubmit);\n\nfunction onclickSubmit(evt) {\n  evt.preventDefault();\n  if (\n    formEl.elements.delay.value === '' ||\n    formEl.elements.step.value === '' ||\n    formEl.elements.amount.value === ''\n  ) {\n    Notiflix.Notify.info('Заполните все поля');\n  } else {\n    let position = 1;\n    let delay = Number(localObj.firstDelay);\n    while (localObj.amount > 0) {\n      createPromise(position, delay);\n      position += 1;\n      console.log(position);\n      delay += Number(localObj.delayStep);\n      console.log(delay);\n      localObj.amount -= 1;\n    }\n  }\n\n  formEl.reset();\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((res, rej) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      } else {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      }\n    }, delay);\n  });\n}\n"],"names":["$iU1Pc","parcelRequire","$ce04d3a99e08e73b$var$formEl","document","querySelector","$ce04d3a99e08e73b$var$buttonEl","$ce04d3a99e08e73b$var$localObj","firstDelay","delayStep","amount","$ce04d3a99e08e73b$var$createPromise","position","delay","shouldResolve","Math","random","Promise","res","rej","setTimeout","$parcel$interopDefault","Notify","success","concat","failure","addEventListener","elements","value","step","evt","preventDefault","info","Number","console","log","reset"],"version":3,"file":"03-promises.2f543b0e.js.map"}