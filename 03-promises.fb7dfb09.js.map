{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAASC,SAASC,cAAc,SAChCC,EAAWF,SAASC,cAAc,UAClCE,EAAW,CACfC,WAAY,GACZC,UAAW,GACXC,OAAQ,IAsCV,SAASC,EAAcC,EAAUC,GAC/B,MAAMC,EAAgBC,KAAKC,SAAW,GACtC,OAAO,IAAIC,SAAQ,CAACC,EAAKC,KACvBC,YAAW,KACLN,EACFO,EAAApB,GAASqB,OAAOC,QACd,uBAAqBX,QAAiBC,OAGxCQ,EAAApB,GAASqB,OAAOE,QACd,sBAAoBZ,QAAeC,MAAU,GAGhDA,EAAM,G,CAhDbV,EAAOsB,iBAAiB,SAExB,WAIE,OAHAlB,EAASC,WAAaL,EAAOuB,SAASb,MAAMc,MAC5CpB,EAASE,UAAYN,EAAOuB,SAASE,KAAKD,MAC1CpB,EAASG,OAASP,EAAOuB,SAAShB,OAAOiB,MAClCpB,C,IAGTD,EAASmB,iBAAiB,SAE1B,SAAuBI,GAErB,GADAA,EAAIC,iBAE8B,KAAhC3B,EAAOuB,SAASb,MAAMc,OACS,KAA/BxB,EAAOuB,SAASE,KAAKD,OACY,KAAjCxB,EAAOuB,SAAShB,OAAOiB,MAEvBN,EAAApB,GAASqB,OAAOS,KAAK,0BACA,CACrB,IAAInB,EAAW,EACXC,EAAQmB,OAAOzB,EAASC,YAC5B,KAAOD,EAASG,OAAS,GACvBC,EAAcC,EAAUC,GACxBD,GAAY,EACZqB,QAAQC,IAAItB,GACZC,GAASmB,OAAOzB,EAASE,WACzBwB,QAAQC,IAAIrB,GACZN,EAASG,QAAU,C,CAIvBP,EAAOgC,O","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst formEl = document.querySelector('.form');\nconst buttonEl = document.querySelector('button');\nconst localObj = {\n  firstDelay: '',\n  delayStep: '',\n  amount: '',\n};\n\nformEl.addEventListener('input', textInput);\n\nfunction textInput() {\n  localObj.firstDelay = formEl.elements.delay.value;\n  localObj.delayStep = formEl.elements.step.value;\n  localObj.amount = formEl.elements.amount.value;\n  return localObj;\n}\n\nbuttonEl.addEventListener('click', onclickSubmit);\n\nfunction onclickSubmit(evt) {\n  evt.preventDefault();\n  if (\n    formEl.elements.delay.value === '' ||\n    formEl.elements.step.value === '' ||\n    formEl.elements.amount.value === ''\n  ) {\n    Notiflix.Notify.info('Заполните все поля');\n  } else {\n    let position = 1;\n    let delay = Number(localObj.firstDelay);\n    while (localObj.amount > 0) {\n      createPromise(position, delay);\n      position += 1;\n      console.log(position);\n      delay += Number(localObj.delayStep);\n      console.log(delay);\n      localObj.amount -= 1;\n    }\n  }\n\n  formEl.reset();\n}\n\nfunction createPromise(position, delay) {\n  const shouldResolve = Math.random() > 0.3;\n  return new Promise((res, rej) => {\n    setTimeout(() => {\n      if (shouldResolve) {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      } else {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      }\n    }, delay);\n  });\n}\n"],"names":["$eWCmQ","parcelRequire","$47d4ff9957288465$var$formEl","document","querySelector","$47d4ff9957288465$var$buttonEl","$47d4ff9957288465$var$localObj","firstDelay","delayStep","amount","$47d4ff9957288465$var$createPromise","position","delay","shouldResolve","Math","random","Promise","res","rej","setTimeout","$parcel$interopDefault","Notify","success","failure","addEventListener","elements","value","step","evt","preventDefault","info","Number","console","log","reset"],"version":3,"file":"03-promises.fb7dfb09.js.map"}